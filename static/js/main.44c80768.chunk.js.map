{"version":3,"sources":["component/Map.js","API/index.js","component/ListItem.js","component/VenueList.js","component/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["MyMapComponent","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","zoom","defaultCenter","lat","lng","center","parseFloat","markers","filter","marker","isVisible","map","idx","venueInfo","venues","find","venue","id","key","position","onClick","handleMarkerClick","animation","google","maps","Animation","DROP","isOpen","bestPhoto","Fragment","src","concat","prefix","suffix","alt","name","location","address","Map","Object","assign","this","googleMapURL","loadingElement","style","height","containerElement","width","mapElement","Component","Helper","keys","client_id","client_secret","v","join","urlParams","Accept","headers","endPoint","method","requestData","fetch","baseURL","auth","urlBuilder","then","response","json","FoursquareAPI","simpleFetch","VENUE_ID","ItemList","_this","className","handleListItemClick","categories","icon","VenueList","ListItem_ItemList","SideBar","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hideSbux","checkbox","document","getElementById","checked","console","log","includes","updateSuperState","handleFilterVenues","state","query","trim","toLowerCase","inputChange","event","target","value","setState","isMatched","type","placeholder","onChange","VenueList_VenueList","App","closeMarkers","getVenueDetails","newVenue","BOUNCE","obj","_this2","search","near","intent","categoryId","results","geocode","feature","geometry","SideBar_SideBar","Map_Map","Boolean","window","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44c80768.chunk.js","sourcesContent":["/* global google */\nimport React, {Component} from \"react\"\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from \"react-google-maps\"\n\n  const MyMapComponent = withScriptjs(\n    withGoogleMap(props => (\n    <GoogleMap\n      defaultZoom={8}\n      zoom={props.zoom}\n      defaultCenter={{ lat: -34.397, lng: 150.644 }}\n      center={{\n        lat: parseFloat(props.center.lat),\n        lng: parseFloat(props.center.lng)\n      }}\n    >\n      {props.markers &&\n        props.markers\n          .filter(marker => marker.isVisible)\n          .map((marker,idx) => {\n            const venueInfo = props.venues.find(venue => venue.id===marker.id);\n            return <Marker\n            key={idx}\n            position={{ lat: marker.lat, lng: marker.lng }}\n            onClick={() => props.handleMarkerClick(marker)}\n            animation={google.maps.Animation.DROP} //If only one, change this to BOUNCE.\n            >\n              {marker.isOpen &&\n                venueInfo.bestPhoto && (\n                  <InfoWindow>\n                <>\n                  <img\n                    src={`${venueInfo.bestPhoto.prefix}100x100${venueInfo.bestPhoto.suffix}`}\n                    alt={`${venueInfo.name}`}\n                  />\n                  <p>{ venueInfo.name }</p>\n                  <p>{ venueInfo.location.address }</p>\n                </>\n              </InfoWindow>\n            )}\n            </Marker>\n          })\n      }\n    </GoogleMap>\n  ))\n);\n\n  export default class Map extends Component {\n    render() {\n      return (\n        <MyMapComponent\n        {...this.props}\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyDuDk-Kii8G-EwKiU54qniCYki40kqVndA\"\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%`, width: `75%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n      )\n    }\n  }\n","class Helper {\n  static baseURL() {\n    return \"https://api.foursquare.com/v2\";\n  }\n  static auth() {\n    const keys = {\n      client_id: 'E22IMWWHGOPZNXEYXHLXUKSQMIVTBSEJXAAYPKWCOUFKHJJY',\n      client_secret: 'GX5BKLN0HOVEE5I55UXFTBSW0GUCBJPUFIZTPAXEPX3JYTJK',\n      v: '20181010'\n    };\n    return Object.keys(keys)\n      .map(key => `${key}=${keys[key]}`)\n      .join(\"&\");\n  }\n  static urlBuilder(urlParams) {\n    if(!urlParams) {\n      return \"\"\n    }\n    return Object.keys(urlParams)\n      .map(key => `${key}=${urlParams[key]}`)\n      .join(\"&\")\n  }\n  static headers() {\n    return {\n      Accept: \"application/json\",\n      headers: Helper.headers()\n    };\n  }\n  static simpleFetch(endPoint, method, urlParams) {\n    let requestData = {\n      method\n    };\n    return fetch(`${Helper.baseURL()}${endPoint}?${Helper.auth()}&${Helper.urlBuilder(\n      urlParams\n    )}`,\n    requestData\n  ).then(response => response.json());\n  }\n}\n\nexport default class FoursquareAPI {\n  static search(urlParams) {\n    return Helper.simpleFetch(\"/venues/search\", \"GET\", urlParams);\n  }\n  static getVenueDetails(VENUE_ID) {\n    return Helper.simpleFetch(`/venues/${VENUE_ID}`, \"GET\");\n  }\n  static getVenuePhotos(VENUE_ID) {\n    return Helper.simpleFetch(`/venues/${VENUE_ID}/photos`, \"GET\");\n  }\n}\n","import React, {Component} from \"react\";\n\nexport default class ItemList extends Component {\n  render() {\n    return (\n      <li className=\"listItem\" onClick={()=> this.props.handleListItemClick(this.props)}>\n        <img src={this.props.categories[0].icon.prefix+\"32\"+this.props.categories[0].icon.suffix} alt={this.props.categories[0].name}/>\n      {this.props.name}\n      </li>\n    )\n  }\n}\n","import React, {Component} from \"react\";\nimport ListItem from \"./ListItem\"\n\nexport default class VenueList extends Component {\n  render() {\n    return (\n      <ul className=\"venueList\">\n        {this.props.venues &&\n          this.props.venues.map((venue, idx) => (\n            <ListItem key={idx} {...venue} handleListItemClick={this.props.handleListItemClick}\n/>\n          ))}\n      </ul>\n    )\n  }\n}\n","import React, {Component} from \"react\";\nimport VenueList from \"./VenueList\"\n\nexport default class SideBar extends Component {\n\n  constructor(props) {\n    super(props)\n    //DON'T CALL this.setState() here!\n    this.state = {\n      query: '',\n      venues: [],\n    }\n  }\n  hideSbux = () => {\n    const checkbox=document.getElementById('myCheck')\n    if(checkbox.checked === true) {\n      console.log(\"CHECKED!\");\n      const venues = this.props.venues.filter(venue => !venue.name.includes('Starbucks'));\n      console.log(venues);\n      this.props.updateSuperState({venues})\n      return venues;\n    }\n    if(checkbox.checked === false){\n      console.log(\"NOT CHECKED, DO NOTHING!\");\n      console.log(this.props.venues);\n      return this.props.venues;\n    }\n  };\n\n  handleFilterVenues = () => {\n    if(this.state.query.trim() !== '') {\n      const venues = this.props.venues.filter(venue =>  venue.name\n        .toLowerCase()\n        .includes(this.state.query.toLowerCase()))\n        return venues;\n    }\n    return this.props.venues;\n  };\n\n  inputChange = (event) => {\n    const query = event.target.value;\n    this.setState({query});\n    const markers = this.props.venues.map(venue => {\n      const isMatched = venue.name.toLowerCase().includes(query.toLowerCase());\n      const marker = this.props.markers.find(marker => marker.id === venue.id);\n      if(isMatched) {\n        marker.isVisible = true;\n      }\n      else {\n         marker.isVisible = false;\n      }\n      return marker;\n    });\n    this.props.updateSuperState({markers})\n    return console.log(query)\n  }\n\n  render() {\n    return (\n      <div className=\"sideBar\">\n        <input\n          type={\"search\"}\n          id={\"search\"}\n          placeholder={\"Filter venues\"}\n          onChange={this.inputChange}\n        />\n\n          Click to hide ALL Starbucks\n          <input\n            type={\"checkbox\"}\n            id={\"myCheck\"}\n            onClick={this.hideSbux}\n          />\n\n        <VenueList {...this.props}\n        venues = {this.handleFilterVenues()}\n        handleListItemClick={this.props.handleListItemClick}\n        />\n      </div>\n    )\n  }\n}\n","/* global google */\nimport React, { Component } from 'react';\nimport './App.css';\nimport Map from \"./component/Map\"\nimport FoursquareAPI from \"./API/\"\nimport SideBar from \"./component/SideBar\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    // Don't call this.setState() here!\n    this.state = {\n      venues: [],\n      center: [],\n      markers: [],\n      name: [],\n      address: [],\n      zoom: 12,\n      updateSuperState: obj => {\n        this.setState(obj);\n      }\n    };\n  }\n  closeMarkers = () =>  {\n    const markers = this.state.markers.map(marker => {\n      marker.isOpen = false;\n      return marker;\n    })\n    this.setState({markers: Object.assign(this.state.markers, markers)})\n  }\n\n  handleMarkerClick = (marker) => {\n    this.closeMarkers();\n    marker.isOpen = true;\n    this.setState({markers: Object.assign(this.state.markers, marker)})\n    const venue = this.state.venues.find(venue => venue.id === marker.id);\n    FoursquareAPI.getVenueDetails(marker.id)\n      .then(response => {\n          const newVenue = Object.assign(venue, response.response.venue);\n          this.setState({ venues: Object.assign(this.state.venues, newVenue) });\n        });\n        marker.animation=google.maps.Animation.BOUNCE;\n\n  }\n\n  handleListItemClick = venue => {\n    const marker = this.state.markers.find(marker => marker.id === venue.id);\n    console.log(marker);\n    this.handleMarkerClick(marker);\n  }\n\n  componentDidMount() {\n    FoursquareAPI.search({\n      near: \"Folsom,CA\",\n      // query: \"coffee\",\n      intent: \"browse\",\n      categoryId: \"4bf58dd8d48988d1e0931735\",\n      // limit: 10\n    }).then(results => {\n        const { venues } = results.response;\n        const { center } = results.response.geocode.feature.geometry;\n        const markers = venues.map(venue => {\n          return {\n            lat: venue.location.lat,\n            lng: venue.location.lng,\n            isOpen:false,\n            isVisible:true,\n            name: venue.name,\n            id: venue.id,\n          };\n        });\n        this.setState({ venues, center, markers });\n        console.log(results)\n        console.log({ markers })\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <SideBar {...this.state}\n        handleListItemClick={this.handleListItemClick}\n        />\n        <Map {...this.state}\n        handleMarkerClick={this.handleMarkerClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}